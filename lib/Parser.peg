@namespace Calculon
@classname Parser
@using System.Globalization
@using Calculon.Types

item <ICalculonType>
    = literal
    / number
    / function

literal <Literal>
    = value:("\"" [A-Za-z0-9_]+ "\"") { new Literal(value) }

function <FunctionInstance>
    = ("+") { FunctionFactory.Instance["add"] }
    / ("-") { FunctionFactory.Instance["sub"] }
    / ("*") { FunctionFactory.Instance["mult"] }
    / ("/") { FunctionFactory.Instance["div"] }
    / ("!") { FunctionFactory.Instance["fact"] }
    / value:([A-Za-z0-9_]+) {FunctionFactory.Instance[util.Concat(value)]}

number <ICalculonType>
    = decimal
    / rational
    / integer
    / realconstant

decimal <Number>
    = value:("-"*[0-9]+ ("." [0-9]+)) { new Number(value) }

rational <Number>
    = value:("-"*[0-9]+ ("/" [1-9]+)) { new Number(value) }

// # note order is vitally important below.
integer <Number>
    = value:("-"*[0-9A-Fa-f]+"h"i) { new Number(value) }
    / value:("-"*[0-9]+"d"i) { new Number(value) }
    / value:("-"*[0-7]+"o"i) { new Number(value) }
    / value:("-"*[0-1]+"b"i) { new Number(value) }
    / value:("-"*[0-9]+) { new Number(value) }

realconstant <RealConstant>
    = ("pi"i<1>!([A-Za-z0-9_]+)) { new RealConstant(RealConstant.Constant.pi) }
    / ("e"i<1>!([A-Za-z0-9_]+)) { new RealConstant(RealConstant.Constant.e) }
    / ("tau"i<1>!([A-Za-z0-9_]+)) { new RealConstant(RealConstant.Constant.tau) }
    