@namespace Calculon
@classname Parser
@using System.Globalization
@using Calculon.Types

item <ICalculonType>
    = literal
    / number
    / op
    / exit

literal <Literal>
    = value:("\"" [A-Za-z0-9_]+ "\"") { new Literal(value) }

op <ICalculonType>
    = addop
    / subop
    / multop
    / divop
    / modop
    / baseconvop
    / roundingops

addop <AddOp>
    = ("+") { new AddOp() }

subop <SubOp>
    = ("-") { new SubOp() }

multop <MultOp>
    = ("*") { new MultOp() }

divop <DivOp>
    = ("/") { new DivOp() }

modop <ModOp>
    = ("mod"i) { new ModOp() }

baseconvop <BaseConvOp>
    = ("todec"i) { new BaseConvOp(Integer.Base.Dec)}
    / ("tobin"i) { new BaseConvOp(Integer.Base.Bin)}
    / ("tohex"i) { new BaseConvOp(Integer.Base.Hex)}
    / ("tooct"i) { new BaseConvOp(Integer.Base.Oct)}

roundingops <ICalculonType>
    = roundtoop
    / roundop
    / floorop
    / ceilingop

roundtoop <RoundToOp>
    = ("roundto"i) { new RoundToOp() }

roundop <RoundOp>
    = ("round"i) { new RoundOp() }

floorop <FloorOp>
    = ("floor"i) { new FloorOp() }

ceilingop <CeilingOp>
    = ("ceiling"i) { new CeilingOp() }

exit <ExitType>
    = ("exit"i) { new ExitType() }
    / ("quit"i) { new ExitType() }

number <ICalculonType>
    = decimal
    / integer

decimal <Real>
    = value:("-"*[0-9]+ ("." [0-9]+)) { new Real(value) }

// # note order is vitally important below.
integer <Integer>
    = value:("-"*[0-9A-Fa-f]+"h"i) { new Integer(value.TrimEnd(value[value.Length - 1]), Integer.Base.Hex) }
    / value:("-"*[0-9]+"d"i) { new Integer(value.TrimEnd(value[value.Length - 1]), Integer.Base.Dec) }
    / value:("-"*[0-7]+"o"i) { new Integer(value.TrimEnd(value[value.Length - 1]), Integer.Base.Oct) }
    / value:("-"*[0-1]+"b"i) { new Integer(value.TrimEnd(value[value.Length - 1]), Integer.Base.Bin) }
    / value:("-"*[0-9]+) { new Integer(value) }