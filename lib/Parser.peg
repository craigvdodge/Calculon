@namespace Calculon
@classname Parser
@using System.Globalization
@using Calculon.Types

item <ICalculonType>
    = literal
    / exit
    / number
    / op

literal <Literal>
    = value:("\"" [A-Za-z0-9_]+ "\"") { new Literal(value) }

op <ICalculonType>
    = arithop
    / baseconvop
    / roundingop
    / integerop
    / ("!") { FunctionFactory.Instance["fact"] }
    / value:([A-Za-z0-9_]+) {FunctionFactory.Instance[util.Concat(value)]}

arithop <ArithOp>
    = ("+") { new ArithOp(ArithOp.Op.Add) }
    / ("-") { new ArithOp(ArithOp.Op.Sub) }
    / ("*") { new ArithOp(ArithOp.Op.Mult) }
    / ("/") { new ArithOp(ArithOp.Op.Div) }
    / ("mod"i) { new ArithOp(ArithOp.Op.Mod) }

baseconvop <BaseConvOp>
    = ("todec"i) { new BaseConvOp(Integer.Base.Dec)}
    / ("tobin"i) { new BaseConvOp(Integer.Base.Bin)}
    / ("tohex"i) { new BaseConvOp(Integer.Base.Hex)}
    / ("tooct"i) { new BaseConvOp(Integer.Base.Oct)}

roundingop <RoundingOpType>
    = ("roundto"i) { new RoundingOpType(RoundingOpType.OpType.RoundTo) } 
    /("round"i) { new RoundingOpType(RoundingOpType.OpType.Round) }
    / ("floor"i) { new RoundingOpType(RoundingOpType.OpType.Floor) }
    / ("ceiling"i) { new RoundingOpType(RoundingOpType.OpType.Ceiling) }

integerop <IntegerOp>
    = ("gcf"i) { new IntegerOp(IntegerOp.Function.GCF) }
    / ("lcm"i) { new IntegerOp(IntegerOp.Function.LCM) }

exit <ExitType>
    = ("exit"i) { new ExitType() }
    / ("quit"i) { new ExitType() }

number <ICalculonType>
    = decimal
    / rational
    / integer
    / realconstant

decimal <Real>
    = value:("-"*[0-9]+ ("." [0-9]+)) { new Real(value) }

rational <Rational>
    = value:("-"*[0-9]+ ("/" [1-9]+)) { new Rational(value) }

// # note order is vitally important below.
integer <Integer>
    = value:("-"*[0-9A-Fa-f]+"h"i) { new Integer(value.TrimEnd(value[value.Length - 1]), Integer.Base.Hex) }
    / value:("-"*[0-9]+"d"i) { new Integer(value.TrimEnd(value[value.Length - 1]), Integer.Base.Dec) }
    / value:("-"*[0-7]+"o"i) { new Integer(value.TrimEnd(value[value.Length - 1]), Integer.Base.Oct) }
    / value:("-"*[0-1]+"b"i) { new Integer(value.TrimEnd(value[value.Length - 1]), Integer.Base.Bin) }
    / value:("-"*[0-9]+) { new Integer(value) }

realconstant <RealConstant>
    = ("pi"i) { new RealConstant(RealConstant.Constant.pi) }
    / ("e"i) { new RealConstant(RealConstant.Constant.e) }
    / ("tau"i) { new RealConstant(RealConstant.Constant.tau) }
    